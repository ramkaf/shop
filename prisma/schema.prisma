// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  firstName String
  lastName  String
  username  String     @unique
  avatar    String     @default("")
  role      Role       @default(USER)
  isActive  Boolean    @default(true)
  wishList  Wishlist[]
  address   Address[]
  cart      Cart?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartId    Int?
}

model Category {
  id           Int       @id @default(autoincrement())
  title        String
  icon         String
  status       Boolean   @default(true)
  slug         String    @unique
  uniqueString String    @unique
  mainImage    String
  quantity Int @default(0)
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Product {
  id               Int            @id @default(autoincrement())
  title            String
  longDescription  String         @db.Text
  shortDescription String
  price            Float          @default(0)
  quantity         Int            @default(0)
  mainImage        String
  productImage     ProductImage[]
  variant          Variant[]
  wishList         Wishlist[]
  slug             String         @unique
  uniqueString     String         @unique
  categoryId       Int
  category         Category       @relation(fields: [categoryId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Variant {
  id           Int           @id @default(autoincrement())
  name         String
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int
  variantItems VariantItem[]
  cartItem     CartItem[]
}

model VariantItem {
  id        Int     @id @default(autoincrement())
  Variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId Int
  name      String
  quantity  Int
  price     Float
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  image     String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Wishlist {
  id        Int      @id @default(autoincrement()) // Auto-increment ID
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Ensure each user-product combination is unique
}

model Address {
  id         Int    @id @default(autoincrement())
  country    String
  province   String
  city       String
  address    String
  postalCode String
  unit       String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Cart {
  id         Int        @id @default(autoincrement())
  totalPrice Float
  user       User       @relation(fields: [userId], references: [id])
  userId     Int        @unique
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId Int
  price     Float
  quantity  Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  @@unique([cartId, variantId])
}
