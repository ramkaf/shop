// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique @db.VarChar(255)
  password   String     @db.VarChar(255)
  firstName  String
  lastName   String
  username   String     @unique
  avatar     String     @default("")
  role       Role       @default(USER)
  isActive   Boolean    @default(true)
  wishList   Wishlist[]
  address    Address[]
  order      Order[]
  coupon     Coupon[]   @relation("CreatedCoupons") // One-to-many: coupons created by this user
  cart       Cart?
  coupons    Coupon[]   @relation("UserCoupons")    // Many-to-many: coupons used by this user
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  cartId     Int?
}

model Category {
  id           Int       @id @default(autoincrement())
  title        String
  icon         String
  status       Boolean   @default(true)
  slug         String    @unique
  uniqueString String    @unique
  mainImage    String
  quantity Int @default(0)
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Product {
  id               Int            @id @default(autoincrement())
  title            String
  longDescription  String         @db.Text
  shortDescription String
  price            Float          @default(0)
  quantity         Int            @default(0)
  mainImage        String
  productImage     ProductImage[]
  variant          Variant[]
  wishList         Wishlist[]
  slug             String         @unique
  uniqueString     String         @unique
  categoryId       Int
  category         Category       @relation(fields: [categoryId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Variant {
  id           Int           @id @default(autoincrement())
  name         String
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int
  variantItems VariantItem[]
}

model VariantItem {
  id        Int     @id @default(autoincrement())
  Variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId Int
  name      String
  quantity  Int
  price     Float
  cartItem     CartItem[]
  orderItem OrderItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  image     String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Wishlist {
  id        Int      @id @default(autoincrement()) // Auto-increment ID
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Ensure each user-product combination is unique
}

model Address {
  id         Int    @id @default(autoincrement())
  provinceId Int?
  cityId     Int?
  province   Province? @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  city       City?     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  address    String
  postalCode String
  unit       String
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  order      Order[]
}

model Cart {
  id         Int        @id @default(autoincrement())
  totalPrice Float
  user       User       @relation(fields: [userId], references: [id])
  userId     Int        @unique
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  variant   VariantItem @relation(fields: [variantId], references: [id])
  variantId Int
  price     Float
  quantity  Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  @@unique([cartId, variantId])
}
enum CouponType {
  VALUE
  PERCENTAGE
}
model Order {
  id         Int        @id @default(autoincrement())
  uniqueString String @unique
  discount Int @default(0)
  user      User?       @relation(fields: [userId], references: [id])
  userId     Int       
  orderItem  OrderItem[]
  recipientName String
  recipientLastName String
  recipientNumber String
  deliveringDate String
  ShippingDate DateTime
  ShippingCost Float 
  cartPrice Float
  servicePrice Float
  finalPrice Float
  address      Address    @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId    Int
  isPaid Boolean @default(false)
  isDelivered Boolean @default(false)
  coupon            Coupon?    @relation(fields: [couponId], references: [id])
  couponId          Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    Int
  price     Float
  variant   VariantItem @relation(fields: [variantId], references: [id])
  variantId Int
  quantity  Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Coupon {
  id                    Int      @id @default(autoincrement())
  code                  String   @unique
  type                  CouponType
  discountValue         Float?   // For value-based coupons
  percentage            Float?   // For percentage-based coupons
  minBuyPrice           Float?   // Minimum price required for value-based coupons
  maxDiscount           Float?   // Maximum discount for percentage-based coupons
  firstOrderOnly        Boolean  @default(false) // For first orders only
  expiresAt             DateTime
  userId                Int?     // Optional: If null, coupon applies to all users
  creator               User?    @relation("CreatedCoupons", fields: [userId], references: [id]) // One-to-many relationship: creator
  enable                Boolean  @default(true)
  usedQuantity          Int      @default(0)
  usedPermittedForEachUser Int? 
  usedPermittedAll      Int?
  orders                Order[]  // A coupon can have many orders

  users                 User[]   @relation("UserCoupons") // Many-to-many: users who have used this coupon
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}


model Province {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(19)
  slug        String? @db.VarChar(17)
  tel_prefix  String? @db.VarChar(3)
  cities      City[]
  addresses   Address[]
}

model City {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(17)
  slug        String? @db.VarChar(26)
  province_id Int?
  province    Province? @relation(fields: [province_id], references: [id])
  addresses   Address[]
}