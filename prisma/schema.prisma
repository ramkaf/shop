// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique @db.VarChar(255)
  password   String     @db.VarChar(255)
  firstName  String
  lastName   String
  username   String     @unique
  mobile String @unique
  avatar     String     @default("")
  role       Role       @default(USER)
  isActive   Boolean    @default(true)
  wishList   Wishlist[]
  address    Address[]
  order      Order[]
  coupon     Coupon[]   @relation("CreatedCoupons") // One-to-many: coupons created by this user
  cart       Cart?
  coupons    Coupon[]   @relation("UserCoupons")    // Many-to-many: coupons used by this user
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id           Int       @id @default(autoincrement())
  title        String
  icon         String
  status       Boolean   @default(true)
  slug         String    @unique
  uniqueString String    @unique
  mainImage    String
  quantity     Int       @default(0)
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Product {
  id               Int            @id @default(autoincrement())
  title            String
  longDescription  String         @db.Text
  shortDescription String
  price            Float?
  quantity         Int            @default(0)
  mainImage        String
  productImage     ProductImage[]
  variant          Variant[]
  wishList         Wishlist[]
  slug             String         @unique
  uniqueString     String         @unique
  categoryId       Int
  category         Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade) // Foreign key constraint
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Variant {
  id           Int           @id @default(autoincrement())
  name         String
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade) // Foreign key constraint
  productId    Int
  variantItems VariantItem[]
}

model VariantItem {
  id        Int      @id @default(autoincrement())
  Variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade) // Foreign key constraint
  variantId Int
  name      String
  quantity  Int
  price     Float
  cartItem  CartItem[]
  orderItem OrderItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  image     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // Foreign key constraint
  productId Int
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Foreign key constraint
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // Foreign key constraint

  @@unique([userId, productId]) // Ensure each user-product combination is unique
}

model Address {
  id         Int      @id @default(autoincrement())
  provinceId Int?
  cityId     Int?
  province   Province? @relation(fields: [provinceId], references: [id], onDelete: Cascade) // Foreign key constraint
  city       City?     @relation(fields: [cityId], references: [id], onDelete: Cascade)     // Foreign key constraint
  address    String
  postalCode String
  unit       String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)      // Foreign key constraint
  userId     Int
  order      Order[]
}

model Cart {
  id         Int       @id @default(autoincrement())
  totalPrice Float
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)      // Foreign key constraint
  userId     Int       @unique
  cartItems  CartItem[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model CartItem {
  id        Int          @id @default(autoincrement())
  cart      Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)    // Foreign key constraint
  cartId    Int
  variant   VariantItem  @relation(fields: [variantId], references: [id], onDelete: Cascade) // Foreign key constraint
  variantId Int
  price     Float
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  @@unique([cartId, variantId])
}

enum CouponType {
  VALUE
  PERCENTAGE
}

model Order {
  id                 Int       @id @default(autoincrement())
  uniqueString       String    @unique
  discount           Int       @default(0)
  user               User?     @relation(fields: [userId], references: [id], onDelete: Cascade) // Foreign key constraint
  userId             Int?
  orderItem          OrderItem[]
  recipientName      String?
  recipientLastName  String?
  recipientNumber    String?
  shippingDate       DateTime
  shippingCost       Float
  cartPrice          Float
  servicePrice       Float
  finalPrice         Float
  address            Address    @relation(fields: [addressId], references: [id], onDelete: Cascade) // Foreign key constraint
  addressId          Int
  isPaid             Boolean    @default(false)
  isProcessed        Boolean    @default(false)
  isDelivered        Boolean    @default(false)
  coupon             Coupon?    @relation(fields: [couponId], references: [id], onDelete: Cascade) // Foreign key constraint
  couponId           Int?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model OrderItem {
  id        Int          @id @default(autoincrement())
  order     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)     // Foreign key constraint
  orderId   Int
  price     Float
  variant   VariantItem  @relation(fields: [variantId], references: [id], onDelete: Cascade)   // Foreign key constraint
  variantId Int
  quantity  Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Coupon {
  id                    Int      @id @default(autoincrement())
  code                  String   @unique
  type                  CouponType
  discountValue         Float?
  percentage            Float?
  minBuyPrice           Float?
  maxDiscount           Float?
  firstOrderOnly        Boolean  @default(false)
  expiresAt             DateTime
  userId                Int?     // Optional: If null, coupon applies to all users
  creator               User?    @relation("CreatedCoupons", fields: [userId], references: [id], onDelete: Cascade) // Foreign key constraint
  enable                Boolean  @default(true)
  usedQuantity          Int      @default(0)
  usedPermittedForEachUser Int?
  usedPermittedAll      Int?
  orders                Order[]  // A coupon can have many orders
  users                 User[]   @relation("UserCoupons") // Many-to-many: users who have used this coupon
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Province {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(19)
  slug        String? @db.VarChar(17)
  tel_prefix  String? @db.VarChar(3)
  cities      City[]
  addresses   Address[]
}

model City {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar(17)
  slug        String? @db.VarChar(26)
  province_id Int?
  province    Province? @relation(fields: [province_id], references: [id], onDelete: Cascade) // Foreign key constraint
  addresses   Address[]
}
